<link rel="stylesheet" type="text/css" href="../build/stylesheets/ruby.css">


<h1>
<img src="../build/images/Ruby_logo.png" alt="Ruby Logo" id="logos"><span>  Ruby</span></h1>

Ruby is a programming language that became popular for its use on the web. It was built to make reading and writing the language very natural and easy to understand.


<h2>Installation</h2>
<ul id="rubyInstallLinks">
	<li><a href="#MacInstallation">Mac</a></li>
	<li><a href="#WindowsInstallation">Windows</a></li>
	<li><a href="#LinuxInstallation">Ubuntu</a></li>
</ul>


<div id="MacInstallation">
<h3>Mac Installation</h3>
First, install Homebrew:
<p><pre class="code">
<span class="code cl">$</span> ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</pre></p>

Next install Ruby-env:
<p><pre class="code">
<span class="code cl">$</span> brew install rbenv ruby-build
</pre></p>

Add rbenv to bash so that it loads every time you open a terminal
<p><pre class="code">
<span class="code cl">$</span> echo 'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile
source ~/.bash_profile
</pre></p>

Install Ruby:
<p><pre class="code">
<span class="code cl">$</span> rbenv install 2.2.1
<span class="code cl">$</span> rbenv global 2.2.1
<span class="code cl">$</span> ruby -v
</pre></p>

</div>


<div id="WindowsInstallation">
<h3>Windows Installation</h3>
First, go to <a href="http://rubyinstaller.org/downloads/">RubyInstaller.org/downloads/</a>

Go under the heading "RubyInstallers" and click on the link titled "Ruby 2.2.1". This will download the Ruby EXE file. Run that file and follow the prompts.
</div>


<div id="LinuxInstallation">
<h3>Ubuntu Installation</h3>
<p><pre class="code">
<span class="code cl">$</span> sudo apt-get install ruby-full
</pre></p>

</div>


<h2>Using Ruby</h2>
Purpose:

<h3>Hello World Program</h3>
<p>The seemingly obligatory start for learning any new programming language is the infamous "Hello World" program. Since Ruby is an interpreted language, all you need to do to greet the world is create a file named "HelloWorld.rb" and put the following code in it.</p>
<p><pre class="code">
<span class="comment">// HelloWorld.rb</span>
puts "Hello, world!"
</pre></p>
<p>Notice that though <span class="inlinecode">puts()</span> is a function, no parentheses are needed before passing it the argument "Hello, world!" This is a special characteristic of Ruby: parentheses are optional for parameter passing. You might have also noticed the lack of a semicolon at the end of the <span class="inlinecode">puts()</span> statement. In Ruby, semicolons are also optional.</p>


<h3>If/Else Statements</h3>
<p>The fundamental basis of programming is predicated on doing something when one condition is true and doing something else when it is false. This still applies in Ruby. Ruby has a slighly different way of doing it, which you will see below: </p>
<p><pre class="code">
if condition
	statement is true
else
	statement is false
end
</pre></p>

<p>Here is an example of one in action.</p>
<p><pre class="code">
isSummer = true
if isSummer
	puts "Let's go outside!"
else
	puts "Let's not!"
end
</pre></p>
<p>In this example, <span class="inlinecode">isSummer</span> is a boolean value that is either true or false. If <span class="inlinecode">isSummer</span> evaluates to <span class="inlinecode">true</span> then the string "Let's go outside!" is printed. If <span class="inlinecode">isSummer</span> evaluates to <span class="inlinecode">false</span> then "Let's not!" is printed. In this case, <span class="inlinecode">isSummer</span> is true, so "Let's go outside!" will be printed to the screen. You should take note that the "<span class="inlinecode">isSummer = true</span>" is not just the assignment of a value to the <span class="inlinecode">isSummer</span> variable. In fact, it is the declaration of the variable, since <span class="inlinecode">isSummer</span> had never been used before in the program. You may be asking yourself why there is no type declaration in front of the declaration, such as writing "<span class="inlinecode">boolean isSummer = true</span>". In Ruby, variable types do not need to be declared! The language even takes it a step forward and allows the type of a variable to change throughout a program. For example, the <span class="inlinecode">isSummer</span> variable might later be used to hold a number instead of a boolean.</p>

<h3>Arrays</h3>
<p>In Ruby, arrays are a very powerful and versatile data structure. As in many programming languages, </p>

<p>There are multiple ways of instantiating them in Ruby. One way is to give it all of its elements when you make it.</p>
<p><pre class="code">
arr = [1, 2, 3, 4, 5]
</pre></p>

<p>Another way is to give it space for a certain number of spots and assign them later.</p>
<p><pre class="code">
arr = Array.new(5)
</pre></p>

<p>You can assign values like you would in a Java array.</p>
<p><pre class="code">
arr = [1, 2, 3, 4, 5]
puts arr[4]  <span class="comment">// => prints "5"</span>
puts arr[0]  <span class="comment">// => prints "1"</span>
</pre></p>

<p>To add items to the array, you have multiple options:</p>
<p><pre class="code">
arr = [1, 2, 3, 4, 5]
arr.push(6)
<span class="comment">// arr is now = [1, 2, 3, 4, 5, 6]</span>
arr.insert(2, 'web')
<span class="comment">// arr is now = [1, 2, 'web', 3, 4, 5, 6]</span>
</pre></p>

<p>To remove items from the array, you have multiple options:</p>
<p><pre class="code">
arr = [1, 2, 3, 4, 5]
arr.pop()		<span class="comment">//=> returns 5</span>
<span class="comment">// arr is now = [1, 2, 3, 4]</span>
arr.delete_at(2)	<span class="comment">//=> returns 3</span>
<span class="comment">// arr is now = [1, 2, 4]</span>
</pre></p>

<h3>Loops</h3>
<p>The most common element in any software program is the loop. Ruby gives developers multiple ways to implement a loop. </p>
<p><pre class="code">
<span class="comment">// Example WHILE loop</span>
i = 0
while i < max  do
   i +=1
end
</pre></p>

<p><pre class="code">
<span class="comment">// Example FOR loop</span>
for i in arr do
   puts "New element"
end
</pre></p>

<p><pre class="code">
<span class="comment">// Example TIMES loop</span>
15.times  do
   puts "I can count to 15!"
end
</pre></p>

<p>This loop is an example of a Ruby specific-loop. In Ruby, even numbers will be wrapped into objects. A number object has a method called <span class="inlinecode">times()</span> that will do something that object's value times. So it will run this loop 15 times.</p>

<p><pre class="code">
<span class="comment">// Example RANGE loop</span>
for i in 0..10
   puts "I can count to 10!"
end
</pre></p>

<p>This is another example of a Ruby specific loop. Ruby can interpret ranges of numbers as indices for the loop. So the <span class="inlinecode">0..10</span> is read as do this for each value of i between 1 and 10 (inclusive).</p>

<h3>Methods</h3>
<p>Methods in Ruby are very simple to define. Since Ruby is a dynamically-typed language, no parameter types nor return types need to be defined. Writing a new method is as easy as shown below.</p>

<p><pre class="code">
<span class="comment">// Example method that prints the variable passed into it</span>
def say(input)
    puts input
end
</pre></p>

<p>In the above example, the start of a method definition is signalled using the "def" keyword followed by the name of the method and its parameters in parentheses. The end of the method definition is indicated by the "end" keyword. Here is another example:</p>

<p><pre class="code">
<span class="comment">// This method calculates the square of a number and returns the result. The result is assigned to the result variable and printed using the puts() method</span>
def square(num)
    num*num
end

result = square(5)
puts result
</pre></p>

<p>In this example, we define a <span class="inlinecode">square()</span> method that squares a given number and the result is the return value of the method. The method is then called and the result is assigned to a <span class="inlinecode">result</span> variable which is then outputted using the <span class="inlinecode">puts()</span> method. You may have noticed that there is no return statement in this method. In Ruby, the "return" keyword is available to be used, but it is optional because the evaluation of the last statement in a method is automatically taken as its return value if no return statement is included.</p>

<h3>String Interpolation</h3>
<p>One useful feature of Ruby is called String Interpolation. It allows the developer to put Ruby code in the middle of a string. It is done by using the <span class="inlinecode">#{code}</span> notation. The code inside of the brackets will be executed first and the result will be outputted in its place. </p>

<p>Remember the example class we wrote for using the <span class="inlinecode">square()</span> method? We can write it in fewer lines using string interpolation.</p>

<p><pre class="code">
<span class="comment">// New "square()" method using string interpolation</span>
def square(num)
    num*num
end

puts "The square of 5 is #{square(5)}"
</pre></p>

<p>This time, the return result of <span class="inlinecode">square()</span> is interpreted when the <span class="inlinecode">puts()</span> method is executed. Since <span class="inlinecode">puts()</span> takes a string as its input, the <span class="inlinecode">#{square(5)}</span> is considered a string and the method call is the string interpolation. In one fell swoop the method <span class="inlinecode">square(5)</span> gets executed, the result is placed into a string prefixed with "The square of 5 is", and the string is then printed by <span class="inlinecode">puts()</span>. Pretty neat, right?</p>

<h3>Classes</h3>
Like in other object-oriented programming languages, Ruby uses classes to group together methods and variables. To create a class in Ruby, use the "class" keyword followed by the name of the class, making sure that the name starts with a capital letter. The end of a class definition is signified by the keyword "end". An example class is shown below.

<p><pre class="code">
<span class="comment">// New "Tree" class</span>
class Tree
    attr_accessor :genus, :species, :age

    @genus
    @species
    @age

    def initialize(gen, spec, years)
        @genus = gen
        @species = spec
        @age = years
    end

    def completeString
        "#{genus} #{species} of age #{age}"
    end
end
</pre></p>

<p>Stuff to add: mention that strings primitives, clean up arrays section (mention that arrays can contain multiple types), blocks of code, classes (objects of classes, @ variables).</p>
