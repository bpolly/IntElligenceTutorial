<link rel="stylesheet" type="text/css" href="../build/stylesheets/html.css">

<!-- HEADER -->
<h1>
<img src="../build/images/html_logo.png" alt="HTML Logo" id="logos" style="vertical-align:middle"><span>  HTML</span></h1>


<h2>Installation</h2>

<p>Luckily for us, the ability to read and make sense of HTML and CSS code is built-in to your everyday browser! That means there's no messy setup and we can get right down to creating webpages using your text editor of choice.
</p>

<h2>Writing HTML</h2>

<p>The first thing we need to talk about is what HTML is and what it can do for us.</p>

<p>HTML stands for HyperText Markup Language - what is a markup language you ask?  Well, a markup language is a language designed to make it easy to "mark up" different sections of your document in different styles.  HTML accomplishes this by using matched tags similar to what you've seen in XML trees.
</p>

<h3>Structure and Syntax</h3>

<p>Because of this system of tags, HTML code will look familiar to you, and you'll be able to discover the "hidden tree structure" of your documents very easily.
</p>

<p>Alright, let's just dive into some examples, shall we?</p>

<p><pre class="code">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		
		&lt;title&gt;Awesome Webpage&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h1&gt;Awesome Header&lt;/h1&gt;
		&lt;p&gt;Hello World!&gt;&gt;
	&lt;/body&gt;
&lt;/html&gt;
</pre></p>

<p>Even with this fairly simple example, we can glean some very important insight to how writing HTML works. First, did you notice the first line?</p>
<p><pre class="code">
&lt;!DOCTYPE html&gt;
</pre></p>

<p>Luckily for us, HTML5 has made it exceptionally easy to declare our code as HTML.  If you want to torture yourself, go look up all the information developers needed to include in the headers for HTML4 and before!</p>

<p>The next thing we do is create a set of tags for our HTML code to live between:</p>

<p><pre class="code">
&lt;html&gt;
<span class="comment">&lt;!-- some other stuff --&gt;</span>
&lt;/html&gt;
</pre></p>

<p>Here we can also see the syntax for declaring comments in HTML code.  Using an exclamation mark followed by two dashes begins the comment, and two dashes ends the comment.
</p>

<p>Next, notice that between the begin and ending html tags we have two other sections at the next level of the tree:
</p>

<p><pre class="code">
&lt;head&gt;
<span class="comment">&lt;!-- some stuff --&gt;</span>
&lt;/head&gt;
&lt;body&gt;
<span class="comment">&lt;!-- some other stuff --&gt;</span>
&lt;/body&gt;
</pre></p>

<p>Within these tags, we can include information specifc to these sections.  We'll use the head section to "hide" useful information from the end user (like links to our javascript or stylesheets that we'll see later) and the body section to define all of the elements the user sees.
</p>

<h3>Basic Elements</h3>

<p>So what kind of elements can we use to style our webpage?</p>
<p><pre class="code">
&lt;h1&gt;This is a header&lt;/h1&gt;
&lt;br&gt;
&lt;h2&gt;This is also a header&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;This is a paragraph of text&lt;/p&gt;
</pre></p>

<p>Let's look at how this looks in a browser:</p>
<img src="images/htmlimages/page1.png" style="max-width:100%">

<p>First, let's note that our browser defines some default styling for the different elements: h1 elements are stylized as large, bold-faced text and h2 and p elements are smaller.  Notice that the br tag produced a "break" between the h1 and h2 elements, and the hr tag produced a "horizontal rule" between the h2 and p.
</p>

<p>As a side note, you may have noticed that the br and hr tags have no corresponding close tag.  This is because br and hr are special elements that do not require closing tags.
</p>

<p>Sometimes, you might find it useful to be able to group data together into logical elements.  Luckily for us, there are a few predefined elements to let us do this:
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Ordered list --&gt;</span>
&lt;ol&gt;
	&lt;li&gt;this is&lt;/li&gt;
	&lt;li&gt;a numbered&lt;/li&gt;
	&lt;li&gt;list&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
<span class="comment">&lt;!-- Unordered list --&gt;</span>
&lt;ul&gt;
	&lt;li&gt;this is&lt;/li&gt;
	&lt;li&gt;an unordered&lt;/li&gt;
	&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
<span class="comment">&lt;!-- Table --&gt;</span>
&lt;table&gt;
	&lt;tr&gt;
		&lt;th&gt;col1&lt;/th&gt;
		&lt;th&gt;col2&lt;/th&gt;
		&lt;th&gt;col3&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;row1col1&lt;/td&gt;
		&lt;td&gt;row1col2&lt;/td&gt;
		&lt;td&gt;row1col3&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;row2col1&lt;/td&gt;
		&lt;td&gt;row2col2&lt;/td&gt;
		&lt;td&gt;row2col3&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
</pre></p>

<p>Here you can see examples of how to create ordered and unordered lists, as well as tables.  In the first part of the code, you can see how we nested li or "list items" inside of an ol or "ordered list" element.  For the second list, we nested the same li elements inside a ul or "unordered list" element.  Lastly, we use the table tag to denote a table and we nest tr or "table row" elements within.  Inside of each tr element, we have two different tags for th ("table headers") and td ("table datum") for header items and regular cells respectively.
</p>

<p>Let's take a look at how our browser beautifully handles these data collections:</p>
<img src="images/htmlimages/page2.png" style="max-width:100%">

<p>

<p>But simple text webpages become boring very quickly.  How can we add links and images?</p>
<p><pre class="code">
&lt;img src="carmen_logo.png"&gt;
&lt;br /&gt;
&lt;a href="https://carmen.osu.edu"&gt;Link to Carmen&lt;/a&gt;
</pre></p>

<p>The img or "image" tag is used to display images (with the path given as a string), and the a or "anchor" tag is used to specify a link.  Between the opening and closing tags for the anchor, you get to specify the text to display for the link itself.  The above code becomes:
</p>
<img src="images/htmlimages/page3.png" style="max-width:100%">

<p>You'll notice that in the above example, both the anchor tag and the image tag contain more than just their types.  These additional values are attributes (just like the way an XML tree's nodes can have additional attributes).  Attributes work as a key value pair in much the same way as the OSU Map component works.  In the previous example, src is the key and "carmen_logo.png" is the value for the image tag.
</p>

<p>You might ask, what else can you do with attributes?  Well, we can use some default attribute names to lend a little extra flair to some of our elements:
</p>

<p><pre class="code">
&lt;h3 style="color: red"&gt;This is a red header.&lt;/h3&gt;
&lt;p style="color: blue"&gt;This is some blue text.&lt;/p&gt;
</pre></p>

<p>Which, unsurprisingly, gives the following result:</p>
<img src="images/htmlimages/page4.png" style="max-width:100%">

<p>This type of styling is called in-line styling, and as you can imagine will get cumbersome very quickly.  This leads us to our next section...
</p>

<h2>Writing CSS</h2>

<p>As seen in our previous examples, using inline styling can get messy very quickly.  We need a way to separate the code defining our styling and the code defining the layout of our elements.  Enter CSS.
</p>

<h3>CSS Locations</h3>

<p>If you remember from our earlier discussion of the structure of an HTML document, all the previous HTML examples were being placed in the body section of the document.  Let's make use of the special head section to define a unified point of control over our formatting.
</p>

<p>Remember the last example with a red h1 element and blue text in a paragraph?  Here's how to accomplish the same styling without cluttering up our HTML with attribute tags:
</p>

<p><pre class="code">
&lt;head&gt;
	&lt;style&gt;
		h3 { color: red; }
		p { color: blue; }
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h3&gt;This is a red header.&lt;/h3&gt;
	&lt;p&gt;This is some blue text.&lt;/p&gt;
&lt;/body&gt;
</pre></p>

<p>As you can see, we've really cleaned up the actual HTML markup of our header and paragraph elements by moving the styling to its own section in the header.  Don't worry about the syntax of the styling elements for now, we'll discuss this in some depth later.  For now, let's just check that everything still renders as it did before:
</p>
<img src="images/htmlimages/page5.png" style="max-width:100%">

<p>Now that we know how to move styling elements away from their HTML markup, wouldn't it be great if we could separate the styling and markup documents entirely?  Turns out, that's a fairly easy (and common) design practice.  Here's how:
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our HTML document --&gt;</span>
&lt;head&gt;
	&lt;link rel="stylesheet" type="text/css" href="theme.css"&gt;
&lt;/head&gt;
</pre></p>
<p><pre class="code">
<span class="comment">&lt;!-- theme.css file --&gt;</span>
h3 { color: red; }
p { color: blue; }
</pre></p>

<p>I'm going to spare you from looking at the exact same screenshot again; please believe that it works the way you expect it to!
</p>

<h3>CSS Syntax and Selectors</h3>

<p>Before we talk about CSS specific syntax, we need to revist element attributes in HTML first.  Two very important attributes that we can declare elements to have: class and id.  Here's a quick example:
</p>

<p><pre class="code">
&lt;h3 id="redHeader"&gt;This is a red header.&lt;/h3&gt;
&lt;p class="blueElements"&gt;This is some blue text.&lt;/p&gt;
</pre></p>

<p>That seems easy enough, but what does it do for us?  To answer that, we need to go back and look at CSS syntax rules.  Remember our first example where we stylized a paragraph element?  We used the element's tag in front of a set of curly braces to "select" which element we wanted to apply our styles to.  In fact, this first part of the CSS code is actually called the selector, and this is where our ids and classes come in so useful.
</p>

<p>But let's look at an example, shall we?</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our HTML document --&gt;</span>
&lt;h3&gt;This is a regular header.&lt;/h3&gt;
&lt;h3 class="someText"&gt;This is a header with class.&lt;/h3&gt;
&lt;p&gt;This is a regular paragraph.&lt;/p&gt;
&lt;p class="someText"&gt;This paragraph is part of a class.&lt;/p&gt;
&lt;p id="special" class="someText"&gt;This paragraph is special.&lt;/p&gt;
&lt;p class="someText"&gt;This is another paragraph in the class.&lt;/p&gt;
</pre></p>

<p>So what we've done is define four paragraphs: one has no id or class, three share a class, and one has a specific id.  Let's look at how we can use CSS selectors to selectively apply styles to these eleemnts:
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
p { background-color: white; }
.someText { background-color: red; }
#special { color: grey; }
</pre></p>

<p>The first thing we've done is set the background color of all paragraph elements to grey.  The second line shows us that we can prefix a class name with a period to use that class name as a CSS selector.  In this case, we've set all elements of the class "someText" to have a red background color.  Lastly, we can preface our ids with a pound sign to select them - in this case setting the text color to grey on the element with an id of "special".
</p>

<h3>Why is it called CSS?</h3>

<p>Before we look at the rendering of this example, you should probably know that CSS actually stands for "Cascading Style Sheets".  What that means to us as developers is that the style changes "cascade" through the different selectors while being applied.  In this case, all of the p elements will obtain a white background color unless a more specific or later defined rule changes that.  You can see how this works with the "special" element - it has a red background color due to being in the "someText" class, but also obtains the grey text coloring from the #special selector:
</p>
<img src="images/htmlimages/page6.png" style="max-width:100%">

<p>If we were to remove the class attribute of the "special" element, we'll see that the background color styling from the p selector is applied to the "special" element instead.  This is quite unfortunate, because now we can't read it!
</p>
<p><pre class="code">
<span class="comment">&lt;!-- Our HTML document --&gt;</span>
&lt;h3&gt;This is a regular header.&lt;/h3&gt;
&lt;h3 class="someText"&gt;This is a header with class.&lt;/h3&gt;
&lt;p&gt;This is a regular paragraph.&lt;/p&gt;
&lt;p class="someText"&gt;This paragraph is part of a class.&lt;/p&gt;
&lt;p id="special"&gt;This paragraph is special.&lt;/p&gt;
&lt;p class="someText"&gt;This is another paragraph in the class.&lt;/p&gt;
</pre></p>
<img src="images/htmlimages/page7.png" style="max-width:100%">

<p>It may seem like magic, but that's probably because it is!  But what happens if you have two different rules that conflict with one another?  How do we decide which style wins out and is the one seen by the end user?
</p>

<p>We can string together selectors to be more specific about which elements get styled!</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
p { background-color: white; }
h3.someText { color: blue; }
p.someText { background-color: red; }
#special { color: grey; }
</pre></p>
<img src="images/htmlimages/page8.png" style="max-width:100%">

<p>Notice how the second header has a different styling than the other h3 element OR the p elements of the same class!  We've now used a selector to pick out all h3 elements of a certain type and only applied our defined style to those elements.
</p>

<p>In addition to being able to use CSS selectors to be more specific about which elements we want to apply styles to, we can use the comma with selectors to apply broad styles to more than one element type at a time:
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
h2, h3, p { background-color: white; }
</pre></p>

<p>This piece of CSS will set the background color of all h2, h3, and p elements to white.</p>

<p>Remember our "hidden tree structure"?  We can use it to our advantage with CSS selectors as well:</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
div p { background-color: white; }
div > p { background-color: yellow; }
</pre></p>

<p>The first selector will find all p elements which are children (or nested within) div elements.  The second selector finds only p elements which are direct children (as opposed to the first example where the div element can be at any node closer to the root than the p element).  There are also selectors for dealing with sibling elements (first found, all siblings, etc).
</p>

<p>Beyond being able to define your own ids and classes to select specific elements, there are so many other attributes for modifying the look and behavior of webpage elements:
</p>

<h3>The Box Model</h3>

<p>One thing that becomes very important when placing elements on your page (whether next to one another or nested within each other) are the following parts that make up each element:
<ul>
	<li>Margin</li>
	<li>Border</li>
	<li>Padding</li>
	<li>Content</li>
</ul>
So far, we've only concerned ourselves with making the content look good.
</p>