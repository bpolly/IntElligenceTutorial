<link rel="stylesheet" type="text/css" href="../build/stylesheets/css.css">

<!-- HEADER -->
<h1>
<img src="../build/images/css_logo.png" alt="CSS Logo" id="logos" style="vertical-align:middle"><span>  CSS</span></h1>


<h2>Installation</h2>

<p>Luckily for us, the ability to read and make sense of HTML and CSS code is built-in to your everyday browser! That means there's no messy setup and we can get right down to creating webpages using your text editor of choice.
</p>

<h2>Writing CSS</h2>

<p>As seen in our previous examples, using inline styling can get messy very quickly.  We need a way to separate the code defining our styling and the code defining the layout of our elements.  Enter CSS.
</p>

<h3>CSS Locations</h3>

<p>If you remember from our earlier discussion of the structure of an HTML document, all the previous HTML examples were being placed in the body section of the document.  Let's make use of the special head section to define a unified point of control over our formatting.
</p>

<p>Remember the last example with a red <span class="inlinecode">h1</span> element and blue text in a paragraph?  Here's how to accomplish the same styling without cluttering up our HTML with attribute tags:
</p>

<p><pre class="code">
&lt;head&gt;
    &lt;style&gt;
        h3 { color: red; }
        p { color: blue; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h3&gt;This is a red header.&lt;/h3&gt;
    &lt;p&gt;This is some blue text.&lt;/p&gt;
&lt;/body&gt;
</pre></p>

<p>As you can see, we've really cleaned up the actual HTML markup of our header and paragraph elements by moving the styling to its own section in the header.  Don't worry about the syntax of the styling elements for now, we'll discuss this in some depth later.  For now, let's just check that everything still renders as it did before:
</p>
<img src="images/htmlimages/page5.png" style="max-width:100%">

<p>Now that we know how to move styling elements away from their HTML markup, wouldn't it be great if we could separate the styling and markup documents entirely?  Turns out, that's a fairly easy (and common) design practice.  Here's how:
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our HTML document --&gt;</span>
&lt;head&gt;
    &lt;link rel="stylesheet" type="text/css" href="theme.css"&gt;
&lt;/head&gt;
</pre></p>
<p><pre class="code">
<span class="comment">&lt;!-- theme.css file --&gt;</span>
h3 { color: red; }
p { color: blue; }
</pre></p>

<p>I'm going to spare you from looking at the exact same screenshot again; please believe that it works the way you expect it to!
</p>

<h3>CSS Syntax and Selectors</h3>

<p>Before we talk about CSS specific syntax, we need to revisit element attributes in HTML first.  Two very important attributes that we can declare elements to have: <span class="inlinecode">class</span> and <span class="inlinecode">id</span>.  Here's a quick example:
</p>

<p><pre class="code">
&lt;h3 id="redHeader"&gt;This is a red header.&lt;/h3&gt;
&lt;p class="blueElements"&gt;This is some blue text.&lt;/p&gt;
</pre></p>

<p>That seems easy enough, but what does it do for us?  To answer that, we need to go back and look at CSS syntax rules.  Remember our first example where we stylized a paragraph element?  We used the element's tag in front of a set of curly braces to "select" which element we wanted to apply our styles to.  In fact, this first part of the CSS code is actually called the selector, and this is where our <span class="inlinecode">id</span> and <span class="inlinecode">class</span> can come in so useful.
</p>

<p>But let's look at an example, shall we?</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our HTML document --&gt;</span>
&lt;h3&gt;This is a regular header.&lt;/h3&gt;
&lt;h3 class="someText"&gt;This is a header with class.&lt;/h3&gt;
&lt;p&gt;This is a regular paragraph.&lt;/p&gt;
&lt;p class="someText"&gt;This paragraph is part of a class.&lt;/p&gt;
&lt;p id="special" class="someText"&gt;This paragraph is special.&lt;/p&gt;
&lt;p class="someText"&gt;This is another paragraph in the class.&lt;/p&gt;
</pre></p>

<<<<<<< HEAD
<p>So what we've done is define four paragraphs: one has no id or class, three share a class, and one has a specific id.  Let's look at how we can use CSS selectors to selectively apply styles to these elements:
=======
<p>So what we've done is define four paragraphs: one has no <span class="inlinecode">id</span> or <span class="inlinecode">class</span>, three share a <span class="inlinecode">class</span>, and one has a specific <span class="inlinecode">id</span>.  Let's look at how we can use CSS selectors to selectively apply styles to these eleemnts:
>>>>>>> 154537029eca025eaac3d08fd13f676a61b5eff7
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
p { background-color: white; }
.someText { background-color: red; }
#special { color: grey; }
</pre></p>

<p>The first thing we've done is set the background color of all paragraph elements to grey.  The second line shows us that we can prefix a <span class="inlinecode">class</span> name with a period to use that <span class="inlinecode">class</span> name as a CSS selector.  In this case, we've set all elements of the <span class="inlinecode">class</span> "someText" to have a red background color.  Lastly, we can preface our <span class="inlinecode">id</span> with a pound sign to select them - in this case setting the text color to grey on the element with an <span class="inlinecode">id</span> of "special".
</p>

<h3>Why is it called CSS?</h3>

<p>Before we look at the rendering of this example, you should probably know that CSS actually stands for "Cascading Style Sheets".  What that means to us as developers is that the style changes "cascade" through the different selectors while being applied.  In this case, all of the <span class="inlinecode">p</span> elements will obtain a white background color unless a more specific or later defined rule changes that.  You can see how this works with the "special" element - it has a red background color due to being in the "someText" <span class="inlinecode">class</span>, but also obtains the grey text coloring from the #special selector:
</p>
<img src="images/htmlimages/page6.png" style="max-width:100%">

<p>If we were to remove the <span class="inlinecode">class</span> attribute of the "special" element, we'll see that the background color styling from the <span class="inlinecode">p</span> selector is applied to the "special" element instead.  This is quite unfortunate, because now we can't read it!
</p>
<p><pre class="code">
<span class="comment">&lt;!-- Our HTML document --&gt;</span>
&lt;h3&gt;This is a regular header.&lt;/h3&gt;
&lt;h3 class="someText"&gt;This is a header with class.&lt;/h3&gt;
&lt;p&gt;This is a regular paragraph.&lt;/p&gt;
&lt;p class="someText"&gt;This paragraph is part of a class.&lt;/p&gt;
&lt;p id="special"&gt;This paragraph is special.&lt;/p&gt;
&lt;p class="someText"&gt;This is another paragraph in the class.&lt;/p&gt;
</pre></p>
<img src="images/htmlimages/page7.png" style="max-width:100%">

<p>It may seem like magic, but that's probably because it is!  But what happens if you have two different rules that conflict with one another?  How do we decide which style wins out and is the one seen by the end user?
</p>

<p>We can string together selectors to be more specific about which elements get styled!</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
p { background-color: white; }
h3.someText { color: blue; }
p.someText { background-color: red; }
#special { color: grey; }
</pre></p>
<img src="images/htmlimages/page8.png" style="max-width:100%">

<p>Notice how the second header has a different styling than the other <span class="inlinecode">h3</span> element OR the <span class="inlinecode">p</span> elements of the same class!  We've now used a selector to pick out all <span class="inlinecode">h3</span> elements of a certain type and only applied our defined style to those elements.
</p>

<p>In addition to being able to use CSS selectors to be more specific about which elements we want to apply styles to, we can use the comma with selectors to apply broad styles to more than one element type at a time:
</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
h2, h3, p { background-color: white; }
</pre></p>

<p>This piece of CSS will set the background color of all <span class="inlinecode">h2</span>, <span class="inlinecode">h3</span>, and <span class="inlinecode">p</span> elements to white.</p>

<p>Remember our "hidden tree structure"?  We can use it to our advantage with CSS selectors as well:</p>

<p><pre class="code">
<span class="comment">&lt;!-- Our CSS file --&gt;</span>
div p { background-color: white; }
div > p { background-color: yellow; }
</pre></p>

<<<<<<< HEAD
<p>The first selector will find all p elements which are children (or nested within) div elements.  The second selector finds only p elements which are direct children (as opposed to the first example where the div element can be at any node closer to the root than the p element).  There are also selectors for dealing with sibling elements (first found, all siblings, etc.).
=======
<p>The first selector will find all <span class="inlinecode">p</span> elements which are children (or nested within) <span class="inlinecode">div</span> elements.  The second selector finds only <span class="inlinecode">p</span> elements which are direct children (as opposed to the first example where the <span class="inlinecode">div</span> element can be at any node closer to the root than the <span class="inlinecode">p</span> element).  There are also selectors for dealing with sibling elements (first found, all siblings, etc).
>>>>>>> 154537029eca025eaac3d08fd13f676a61b5eff7
</p>

<p>Beyond being able to define your own ids and classes to select specific elements, there are so many other attributes for modifying the look and behavior of webpage elements:
</p>

<h3>The Box Model</h3>

<p>One thing that becomes very important when placing elements on your page (whether next to one another or nested within each other) are the following parts that make up each element:
<ul>
	<li>Margin</li>
	<li>Border</li>
	<li>Padding</li>
	<li>Content</li>
</ul>
So far, we've only concerned ourselves with making the content of our elements look good.  Now, we need to pay attention to the attributes of our elements that control the other three aspects of how elements look: Margin, Border, and Padding.  Let's take a look at an image to better describe what these elements are:
</p>
<img src="images/htmlimages/boxmodel.png" title="Shameless stolen from &quot;Dojo: The Definitve Guide&quot;" style="max-width:100%">

<p>It may look intimidating at first, but all you need to keep in mind is that each one of these four attributes will have a set number of pixels devoted to it.  Because of this, we can control the space between our elements, whether our elements have borders (and the type of border), and where background colors or images start and end.
</p>

